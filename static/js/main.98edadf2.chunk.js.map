{"version":3,"sources":["components/Button.jsx","components/Card.jsx","components/Header.jsx","components/View.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","name","onClick","className","Card","src","this","props","drinkImg","drinkName","drinkIngredients","join","drinkInstructions","Component","Header","View","state","idDrink","fetch","then","res","json","data","ingredients","getIngredients","drinks","setState","strDrink","strInstructions","strDrinkThumb","console","log","Object","getOwnPropertyNames","filter","key","includes","forEach","push","myData","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mVAoBeA,G,YAfA,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,QACnB,OACI,4BACIC,UAAY,SACZD,QAAWA,GACND,KCeFG,G,6KAnBP,OACI,yBAAKD,UAAU,QACX,yBAAKA,UAAU,WACf,yBAAKE,IAAKC,KAAKC,MAAMC,SAAUL,UAAU,QACzC,yBAAKA,UAAU,cACf,4BAAKG,KAAKC,MAAME,WAChB,2BAAIH,KAAKC,MAAMG,iBAAiBC,KAAK,UAIrC,yBAAKR,UAAU,gBACf,4CACA,2BAAIG,KAAKC,MAAMK,yB,GAdZC,cCSJC,G,6KARP,OACI,yBAAKX,UAAU,UACX,yBAAKE,IAAI,kBACT,oD,GALKQ,cC4ENE,G,wDAvEX,WAAYR,GAAQ,IAAD,8BACf,cAAMA,IACDS,MAAQ,CACTC,QAAS,KACTR,UAAW,KACXG,kBAAmB,KACnBJ,SAAU,KACVE,iBAAkB,IAPP,E,qDAaR,IAAD,OACNQ,MAAM,0DACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACN,IAAMC,EAAc,EAAKC,eAAeF,EAAKG,OAAO,IAClD,EAAKC,SAAS,CACVT,QAASK,EAAKG,OAAO,GAAGR,QACxBR,UAAWa,EAAKG,OAAO,GAAGE,SAC1Bf,kBAAmBU,EAAKG,OAAO,GAAGG,gBAClCpB,SAAUc,EAAKG,OAAO,GAAGI,cACzBnB,iBAAkBa,IAEtBO,QAAQC,IAAI,EAAKf,Y,qCAKLM,GACd,IAAIC,EAAc,GAUlB,OATuBS,OAAOC,oBAAoBX,GAAMY,QAAO,SAAAC,GAAG,OAAIA,EAAIC,SAAS,oBACpEC,SAAQ,SAAAF,GAEnB,IAAGb,EAAKa,GAGJ,OAAOZ,EAFPA,EAAYe,KAAKhB,EAAKa,OAKvBZ,I,0CAKPjB,KAAKiC,W,+BAGA,IAAD,OAER,OACC,kBAAC,WAAD,KACG,kBAAC,EAAD,MACC,yBAAKpC,UAAU,QACpB,kBAAC,EAAD,CACCc,QAASX,KAAKU,MAAMC,QACpBR,UAAWH,KAAKU,MAAMP,UACtBG,kBAAmBN,KAAKU,MAAMJ,kBAC9BJ,SAAUF,KAAKU,MAAMR,SACrBE,iBAAkBJ,KAAKU,MAAMN,mBAE5B,kBAAC,EAAD,CAAQR,QAAS,kBAAK,EAAKqC,UAAUtC,KAAM,oB,GA/D9BY,cCaJ2B,E,uKAVX,OACC,yBAAKrC,UAAU,OAEb,kBAAC,EAAD,W,GANWU,aCKE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.98edadf2.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'; \r\nimport './Button.css';\r\n\r\n\r\nconst Button = ({name, onClick}) => {\r\n    return (\r\n        <button \r\n            className = 'button'\r\n            onClick = {onClick}>\r\n                {name}\r\n        </button>\r\n    )\r\n}\r\n\r\nButton.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    onClick: PropTypes.func\r\n}\r\n\r\nexport default Button;","import React, {Component } from 'react';\r\nimport './Card.css';\r\n\r\n\r\nclass Card extends Component {\r\n    render() {\r\n        return(\r\n            <div className=\"card\">\r\n                <div className=\"imgCard\">\r\n                <img src={this.props.drinkImg} className=\"img\"/>\r\n                <div className=\"drink-name\">\r\n                <h3>{this.props.drinkName}</h3>\r\n                <p>{this.props.drinkIngredients.join(' | ')}</p>\r\n                </div>\r\n                \r\n                </div>\r\n                <div className=\"instructions\">\r\n                <h2>Instructions</h2>\r\n                <p>{this.props.drinkInstructions}</p>\r\n                </div>\r\n            </div>\r\n        \r\n        )\r\n    }\r\n}\r\nexport default Card;\r\n","import React, {Component } from 'react';\r\nimport './Header.css';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return(\r\n            <div className=\"header\">\r\n                <img src=\"/img/logo.png\"/>\r\n                <h1>Make Your Drink</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Header;","import React, {Component, Fragment } from 'react';\r\nimport Button from './Button';\r\nimport Card from './Card';\r\nimport Header from './Header';\r\nimport './View.css';\r\n\r\n\r\nclass View extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            idDrink: null,\r\n            drinkName: null,\r\n            drinkInstructions: null,\r\n            drinkImg: null,\r\n            drinkIngredients: []\r\n        }\r\n      \r\n    }\r\n\r\n\r\n     myData() {\r\n        fetch('https://www.thecocktaildb.com/api/json/v1/1/random.php')\r\n        .then(res => res.json())\r\n        .then(data => {\r\n        const ingredients = this.getIngredients(data.drinks[0]);\r\n          this.setState({\r\n              idDrink: data.drinks[0].idDrink,\r\n              drinkName: data.drinks[0].strDrink,\r\n              drinkInstructions: data.drinks[0].strInstructions,\r\n              drinkImg: data.drinks[0].strDrinkThumb,\r\n              drinkIngredients: ingredients\r\n          })\r\n          console.log(this.state);\r\n        })\r\n        \r\n      }\r\n\r\n      getIngredients (data) {\r\n        let ingredients = [];\r\n        const ingredientKeys = Object.getOwnPropertyNames(data).filter(key => key.includes('strIngredient'))\r\n        ingredientKeys.forEach(key => {\r\n    \r\n            if(data[key]){\r\n                ingredients.push(data[key])\r\n            }else{\r\n                return ingredients\r\n            }\r\n        })\r\n        return ingredients\r\n    }\r\n    \r\n      \r\n    componentDidMount() {\r\n        this.myData();\r\n    }\r\n      \r\n  render () {\r\n    \r\n    return (\r\n     <Fragment>\r\n        <Header/>\r\n         <div className=\"view\">\r\n    <Card\r\n     idDrink={this.state.idDrink}\r\n     drinkName={this.state.drinkName}\r\n     drinkInstructions={this.state.drinkInstructions}\r\n     drinkImg={this.state.drinkImg}\r\n     drinkIngredients={this.state.drinkIngredients}\r\n     />\r\n      <Button onClick={()=> this.myData()} name= 'New Drink'/>\r\n   </div>\r\n     </Fragment>\r\n     \r\n     \r\n \r\n    );\r\n  }\r\n}\r\nexport default View","import React, { Component } from 'react';\nimport './App.css';\nimport View from './components/View';\n\n\n\n\nclass App extends Component {\n\n  render () {\n    return (\n     <div className=\"app\">\n\n       <View/>\n     </div>\n    );\n  }\n  }\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}